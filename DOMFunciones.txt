Node
	- nodeName  devuelve el tipo de nodo (#text, #comment, #document...)
		Si el nodo es tipo elemento, nodeName devuelve en mayúsculas

	- nodeValue devuelve el valor de un nodo
		Si el nodo es tipo elemento devuelve null

	- appendChild( agrega al nodo otro nodo como un nodo hijo



	NodeList
		Similar a array de JS. Tiene .length
		
		- NodeList.item( Devuelve un elemento por el índice.
			Si el índice no existe devuelve null
		
		- NodeList.entries() Devuelve un iterador que pone indices desde 0
			const iterador = array.entries();
			for (let [indice, nodo] of iterador) {
				console.log(`Índice: ${indice}, Nodo: ${nodo.textContent}`);
			}

		- NodeList.forEach() Iterador para recorrer listas de nodos (Igual que arrays)

		- NodeList.keys() Devuelve un iterador pero solo de claves (indices)
			const iterador = nodeList.keys();
			for (let clave of iterador) {
				console.log(`Índice: ${clave}`);
			}

		- NodeList.values() Devuelve un iterador pero solo de valores
			const iterador = nodeList.values();
			for (let nodo of iterador) {
				console.log(`Contenido del nodo: ${nodo.textContent}`);
			}



	DOMTokenList
		Lista de tokens (palabras) separados por espacios
		Distingue entre Mayusc y Minusc
		Tiene .length y .value



	NamedNodeMap
		Colección e objetos Attr para acceder y modificar atributos en DOM
		Los objetos dentro no tienen orden
		Tiene .length y métodos como:
			getNamedItem(), getNamedItemNS(), setNamedItem(), setNamedItemNS(), removeNamedItem(), removeNamedItem(), removeNamedItemNS() e item()
		No se suele utilizar



HTMLCollection
	Parecido a array de JS
	Colección (de tipo nodo) ordenada por aparición en documento
		const elemento=document.all;
		console.log(elemento.item(4)); == console.log(elemento[4]);



Document
	Con el se accede a todo el documento
	- document.head  Devuelve el elemento head del DOM (<head>)
	
	- document.domain  Devuelve el dominio de la pagina web

	- document.body  Devuelve el elemento body del DOM (<body>)

	- document.form  Devuelve los elementos form del DOM (<form>) en un HTMLCollection

	- document.links  Devuelve un HTMLCollection con los enlaces del documento
	
	- document.images  Devuelve un HTMLCollection con las imágenes del documento

	- document.scripts devuelve un HTMLCollection con los scripts presentes en el documento

	El objeto Window representa la ventana que contiene un documento DOM y proporciona una interfaz con funciones, objetos y constructores no 				necesariamente vinculados a la ventana de la interfaz de usuario
		Se puede obtener una referencia a este objeto mediante la propiedad document.defaultView
			const objWindow= document.defaultView;
			console.log(objWindow);



Window
	Accesible directamente para JS mediante window (console.log(window.document);
	Tiene la propiedad name ara obtener o cambiar nombre de la ventana

	- window.open("link")  Abre el link en una pestaña nueva

	- navigator  Da mucha info.
		console.log(window.navigator.language);



Document metodos

	- getElementsByName()  Devuelve NodeList con elementos del nombre del argumento
		Si no hay elementos lo devuelve vacio
			const elementos = document.getElementsByName('viewport');

	- getElementsByTagName()  Devuelve un HTMLCollection con elemento de etuqueta la del argumento
		Si no hay elementos lo devuelve vacio
			const elementos = document.getElementsByTagName('p')

	- getElemetsByClassName()  Devuelve un HTMLCollection con elementos de clase la del argumento
		const elementos = document.getElementsByClassName('cabecera')
		Puede introducirse mas de 1 clase en el argumento

	- getElementsById()  Devuelve una referencia a un elemento del DOM
		Si no hay elementos devuelve null
		const elemento = document.getElementById('Profesor')
		Devuelve el primer elemento que exista y sus hijos

	- querySelector()  Mas utilizado
		Si no hay elementos devuelve null
		En el argumento va un selector (misma sintaxis que css)
			const elemento = document.querySelector('#profesor')
		En el siguiente ejemplo se selecciona el primer elemento que tenga la clase cabecera
			y que cumpla que es hijo de un elemento con Id Contenidos
			const elemento = document.querySelector('#Contenidos >.cabecera')
		Primer elemento de la cabecera que tenga un atributo charset
			const elemento = document.querySelector('head [charset]')
		Dos clases a la vez
			const elemento = document.querySelector('.descargas.cursiva')
		Primer elemento que sea un <a> y que tenga un atributo href cuyo valor contenga Profesor
			y que cumpla que es hijo de un elemento con <li>
			const elemento = document.querySelector('li a[href*="Profesor"]')
		Puede usarse :nth-child()
			const elemento = document.querySelector('#Profesor p:nth-child(3)')

	- querySelectorAll()  Selecciona todos los elementos del DOM que cumplan con el selector
		Devuelve un NodeList. Si no hay elementos lo devuelve vacio
			const elementos = document.querySelectorAll('a')
		Elementos que tenga la clase cabecera y que cumpla que son hijos de un elemento <section>
			const elementos = document.querySelectorAll('section .cabecera')



Cambiar atributos de elementos	
	Con los anteriores selectores pueden cambiarse los atributos
		const imagen = document.querySelector('.licencia img');
		imagen.src='https://www.educa.jcyl.es/es/banners/202569-logo-jcyl.gif';



	- innerText  Contenido de texto "formateado"
		Tiene en cuenta el CSS
			const elemento = document.querySelector('h2');
			console.log(elemento.innerText);
		Puede modificar contenido de texto
			const elemento = document.querySelector('h2');
			elemento.innerText='Hola';
		Si visivility: hidden; no muestra el texto

	- textContent  Propiedad de Node. Contenido de texto de nodo y descendientes
		No tiene en cuenta el CSS
			const elemento = document.querySelector('h2');
			elemento.textContent="     HOLA";
			console.log(elemento.textContent);   --> '     HOLA'
			console.log(elemento.innerText);     --> 'HOLA'

	- innerHTML  Contenido de texto incluidas las etiquetas HTML
		Tambien puede modificar contenido
			const elemento = document.querySelector('h2');
			elemento.innerHTML='<a href="pago.html">100 &yen;</a>';



Style
	Puede cambiar el estilo de un elemento de forma dinámica
		const elemento= document.querySelector('h2');
		elemento.style.backgroundColor="red";
	contiene también el atributo cssText que permite asignar varias propiedades CSS al mismo tiempo
		elemento.style.cssText = 'background-color: black; color: white;';
	
	- className  Da el nombre de la clase de un elemento
		Tambien puede cambiar la calse del elemento
			const elemento= document.querySelector('h2');
			console.log(elemento.className);
			elemento.className='licencia';
			console.log(elemento.className);
	
	- classList  Devuelve un DOMTokenList de solo lectura con las clases de un elemento
		const elemento= document.querySelector('h2');
		console.log(elemento.classList);

		- .add()  Permite añadir una o varias clases a un elemento
			elemento.classList.add('licencia','cursiva', 'negrita');

		- .toggle()  Permite añadir/quitar una clase si esta/no esta
			elemento.classList.add('licencia');

		- .contains()  Devuelve true/false si contiene o no un elemento una clase
			console.log(elemento.classList.contains('licencia'));

		- .remove()  Elimina clases pasadas como argumento
			elemento.classList.remove('text-center');


	styleSheets
		Da las propiedades de estilo de la pagina
		Devuelve un array de tipo StyleSheetList con las hojas de estilo
		Tambien sirve para modificar
		Cada elemento del array contiene otros elementos como cssRules que son los selectores del estilo.

		const estilo=document.styleSheets[1];
		estilo.cssRules[4].style.backgroundColor="blue";

		- setAttribute  Establece el valor de un atributo en el elemento
			El primer argumento cambia el nombre del atributo y el segundo el valor
				elemento.setAttribute("id","NombreProfesor");

		- getAttribute  Devuelve el valor de un atributo pasado como argumento
			elemento.setAttribute("id","NombreProfesor");
			console.log(elemento.getAttribute("id"));   --> NombreProfesor
	
		- removeAttribute  Elimina el atributo pasado
			elemento.setAttribute("id","NombreProfesor");
			console.log(elemento.getAttribute("id"));
			elemento.removeAttribute("id");		    --> NombreProfesor
			console.log(elemento.getAttribute("id"));   --> null



	traversing
		Para recorrer el arbol DOM desde un elemento seleccionado (jQuery)

		- clossest()  Busca el padre mas cercano con el selector pasado
			<main>
 				<section id="Profesor">
 					<p class="cabecera">Profesor</p>
 					<p>Me llamo Jorge García Flores,...

			const elemento = document.querySelector("#Profesor .cabecera");
			console.log(elemento.closest("main"));   --> <main> ... </main>
	
		- childNodes  Devuelve un NodeList con los hijos de un elemento
			Cuenta las etiquetas del código como elemento
			Al ser un array puede acceder a un elemento en concreto
				const elemento= document.querySelector('ul');
				const hijo= elemento.childNodes[1];

		- children  De solo lectura devuelve un HTMLCollection con todos los hijos
			de un elemento
				const elemento= document.querySelector('ul');
				const hijo= elemento.children[0];

		- parentNode  Solo lectura contiene nodo padre de un elemento
			const elemento= document.querySelector('h1');
			console.log(elemento.parentNode);

		- parentElement  Solo lectura contiene elemento padre de un elemento
			const elemento= document.querySelector('h1');
			console.log(elemento. parentElement);

		- nextElementSibling  Solo lectura devuelve elemento después del mismo
			console.log(elemento.nextElementSibling);

		- previousElementSibling  Solo lectura devuelve elemento anterior o null
			console.log(elemento.previousElementSibling);

		- firstElementChild  Solo lectura accede primer elemento hijo de un elemento
			console.log(elemento.firstElementChild);

		- lastElementChild  Solo lectura accede ultimo elemento hijo de un elemento
			console.log(elemento.lastElementChild);












